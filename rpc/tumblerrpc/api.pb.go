// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package tumblerrpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	PingRequest
	PingResponse
	SetupEscrowRequest
	SetupEscrowResponse
	GetPuzzlePromisesRequest
	GetPuzzlePromisesResponse
	FinalizeEscrowRequest
	FinalizeEscrowResponse
	GetSolutionPromisesRequest
	GetSolutionPromisesResponse
	ValidateSolutionsRequest
	ValidateSolutionsResponse
	PaymentOfferRequest
	PaymentOfferResponse
*/
package tumblerrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	VersionString string `protobuf:"bytes,1,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	Major         uint32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Minor         uint32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty"`
	Patch         uint32 `protobuf:"varint,4,opt,name=patch" json:"patch,omitempty"`
	Prerelease    string `protobuf:"bytes,5,opt,name=prerelease" json:"prerelease,omitempty"`
	BuildMetadata string `protobuf:"bytes,6,opt,name=build_metadata,json=buildMetadata" json:"build_metadata,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersionString() string {
	if m != nil {
		return m.VersionString
	}
	return ""
}

func (m *VersionResponse) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *VersionResponse) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *VersionResponse) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *VersionResponse) GetPrerelease() string {
	if m != nil {
		return m.Prerelease
	}
	return ""
}

func (m *VersionResponse) GetBuildMetadata() string {
	if m != nil {
		return m.BuildMetadata
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SetupEscrowRequest struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
}

func (m *SetupEscrowRequest) Reset()                    { *m = SetupEscrowRequest{} }
func (m *SetupEscrowRequest) String() string            { return proto.CompactTextString(m) }
func (*SetupEscrowRequest) ProtoMessage()               {}
func (*SetupEscrowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SetupEscrowRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SetupEscrowRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SetupEscrowRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SetupEscrowResponse struct {
	Cookie            []byte `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Epoch             int32  `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	LockTime          int32  `protobuf:"varint,3,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	Address           string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	PublicKey         string `protobuf:"bytes,5,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	EscrowScript      []byte `protobuf:"bytes,6,opt,name=escrow_script,json=escrowScript,proto3" json:"escrow_script,omitempty"`
	EscrowTransaction []byte `protobuf:"bytes,7,opt,name=escrow_transaction,json=escrowTransaction,proto3" json:"escrow_transaction,omitempty"`
}

func (m *SetupEscrowResponse) Reset()                    { *m = SetupEscrowResponse{} }
func (m *SetupEscrowResponse) String() string            { return proto.CompactTextString(m) }
func (*SetupEscrowResponse) ProtoMessage()               {}
func (*SetupEscrowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SetupEscrowResponse) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *SetupEscrowResponse) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *SetupEscrowResponse) GetLockTime() int32 {
	if m != nil {
		return m.LockTime
	}
	return 0
}

func (m *SetupEscrowResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SetupEscrowResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *SetupEscrowResponse) GetEscrowScript() []byte {
	if m != nil {
		return m.EscrowScript
	}
	return nil
}

func (m *SetupEscrowResponse) GetEscrowTransaction() []byte {
	if m != nil {
		return m.EscrowTransaction
	}
	return nil
}

type GetPuzzlePromisesRequest struct {
	Cookie            []byte   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	FakeSetHash       []byte   `protobuf:"bytes,2,opt,name=fake_set_hash,json=fakeSetHash,proto3" json:"fake_set_hash,omitempty"`
	RealSetHash       []byte   `protobuf:"bytes,3,opt,name=real_set_hash,json=realSetHash,proto3" json:"real_set_hash,omitempty"`
	TransactionHashes [][]byte `protobuf:"bytes,4,rep,name=transaction_hashes,json=transactionHashes,proto3" json:"transaction_hashes,omitempty"`
}

func (m *GetPuzzlePromisesRequest) Reset()                    { *m = GetPuzzlePromisesRequest{} }
func (m *GetPuzzlePromisesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPuzzlePromisesRequest) ProtoMessage()               {}
func (*GetPuzzlePromisesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetPuzzlePromisesRequest) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *GetPuzzlePromisesRequest) GetFakeSetHash() []byte {
	if m != nil {
		return m.FakeSetHash
	}
	return nil
}

func (m *GetPuzzlePromisesRequest) GetRealSetHash() []byte {
	if m != nil {
		return m.RealSetHash
	}
	return nil
}

func (m *GetPuzzlePromisesRequest) GetTransactionHashes() [][]byte {
	if m != nil {
		return m.TransactionHashes
	}
	return nil
}

type GetPuzzlePromisesResponse struct {
	PublicKey []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PuzzleKey []byte   `protobuf:"bytes,2,opt,name=puzzle_key,json=puzzleKey,proto3" json:"puzzle_key,omitempty"`
	Puzzles   [][]byte `protobuf:"bytes,3,rep,name=puzzles,proto3" json:"puzzles,omitempty"`
	Promises  [][]byte `protobuf:"bytes,4,rep,name=promises,proto3" json:"promises,omitempty"`
}

func (m *GetPuzzlePromisesResponse) Reset()                    { *m = GetPuzzlePromisesResponse{} }
func (m *GetPuzzlePromisesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPuzzlePromisesResponse) ProtoMessage()               {}
func (*GetPuzzlePromisesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetPuzzlePromisesResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GetPuzzlePromisesResponse) GetPuzzleKey() []byte {
	if m != nil {
		return m.PuzzleKey
	}
	return nil
}

func (m *GetPuzzlePromisesResponse) GetPuzzles() [][]byte {
	if m != nil {
		return m.Puzzles
	}
	return nil
}

func (m *GetPuzzlePromisesResponse) GetPromises() [][]byte {
	if m != nil {
		return m.Promises
	}
	return nil
}

type FinalizeEscrowRequest struct {
	Cookie     []byte   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Salt       []byte   `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	FakeTxList []byte   `protobuf:"bytes,3,opt,name=fake_tx_list,json=fakeTxList,proto3" json:"fake_tx_list,omitempty"`
	RealTxList []byte   `protobuf:"bytes,4,opt,name=real_tx_list,json=realTxList,proto3" json:"real_tx_list,omitempty"`
	RandomPads [][]byte `protobuf:"bytes,5,rep,name=random_pads,json=randomPads,proto3" json:"random_pads,omitempty"`
}

func (m *FinalizeEscrowRequest) Reset()                    { *m = FinalizeEscrowRequest{} }
func (m *FinalizeEscrowRequest) String() string            { return proto.CompactTextString(m) }
func (*FinalizeEscrowRequest) ProtoMessage()               {}
func (*FinalizeEscrowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FinalizeEscrowRequest) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *FinalizeEscrowRequest) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *FinalizeEscrowRequest) GetFakeTxList() []byte {
	if m != nil {
		return m.FakeTxList
	}
	return nil
}

func (m *FinalizeEscrowRequest) GetRealTxList() []byte {
	if m != nil {
		return m.RealTxList
	}
	return nil
}

func (m *FinalizeEscrowRequest) GetRandomPads() [][]byte {
	if m != nil {
		return m.RandomPads
	}
	return nil
}

type FinalizeEscrowResponse struct {
	EscrowHash []byte   `protobuf:"bytes,1,opt,name=escrow_hash,json=escrowHash,proto3" json:"escrow_hash,omitempty"`
	Secrets    [][]byte `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty"`
	Quotients  [][]byte `protobuf:"bytes,3,rep,name=quotients,proto3" json:"quotients,omitempty"`
}

func (m *FinalizeEscrowResponse) Reset()                    { *m = FinalizeEscrowResponse{} }
func (m *FinalizeEscrowResponse) String() string            { return proto.CompactTextString(m) }
func (*FinalizeEscrowResponse) ProtoMessage()               {}
func (*FinalizeEscrowResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FinalizeEscrowResponse) GetEscrowHash() []byte {
	if m != nil {
		return m.EscrowHash
	}
	return nil
}

func (m *FinalizeEscrowResponse) GetSecrets() [][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *FinalizeEscrowResponse) GetQuotients() [][]byte {
	if m != nil {
		return m.Quotients
	}
	return nil
}

type GetSolutionPromisesRequest struct {
	Address string   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Epoch   int32    `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	Puzzles [][]byte `protobuf:"bytes,3,rep,name=puzzles,proto3" json:"puzzles,omitempty"`
}

func (m *GetSolutionPromisesRequest) Reset()                    { *m = GetSolutionPromisesRequest{} }
func (m *GetSolutionPromisesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSolutionPromisesRequest) ProtoMessage()               {}
func (*GetSolutionPromisesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetSolutionPromisesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *GetSolutionPromisesRequest) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *GetSolutionPromisesRequest) GetPuzzles() [][]byte {
	if m != nil {
		return m.Puzzles
	}
	return nil
}

type GetSolutionPromisesResponse struct {
	Cookie    []byte   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Promises  [][]byte `protobuf:"bytes,2,rep,name=promises,proto3" json:"promises,omitempty"`
	KeyHashes [][]byte `protobuf:"bytes,3,rep,name=key_hashes,json=keyHashes,proto3" json:"key_hashes,omitempty"`
}

func (m *GetSolutionPromisesResponse) Reset()                    { *m = GetSolutionPromisesResponse{} }
func (m *GetSolutionPromisesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSolutionPromisesResponse) ProtoMessage()               {}
func (*GetSolutionPromisesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetSolutionPromisesResponse) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *GetSolutionPromisesResponse) GetPromises() [][]byte {
	if m != nil {
		return m.Promises
	}
	return nil
}

func (m *GetSolutionPromisesResponse) GetKeyHashes() [][]byte {
	if m != nil {
		return m.KeyHashes
	}
	return nil
}

type ValidateSolutionsRequest struct {
	Cookie         []byte   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	FakePuzzleList []byte   `protobuf:"bytes,2,opt,name=fake_puzzle_list,json=fakePuzzleList,proto3" json:"fake_puzzle_list,omitempty"`
	RandomFactors  [][]byte `protobuf:"bytes,3,rep,name=random_factors,json=randomFactors,proto3" json:"random_factors,omitempty"`
}

func (m *ValidateSolutionsRequest) Reset()                    { *m = ValidateSolutionsRequest{} }
func (m *ValidateSolutionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateSolutionsRequest) ProtoMessage()               {}
func (*ValidateSolutionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ValidateSolutionsRequest) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *ValidateSolutionsRequest) GetFakePuzzleList() []byte {
	if m != nil {
		return m.FakePuzzleList
	}
	return nil
}

func (m *ValidateSolutionsRequest) GetRandomFactors() [][]byte {
	if m != nil {
		return m.RandomFactors
	}
	return nil
}

type ValidateSolutionsResponse struct {
	Secrets [][]byte `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (m *ValidateSolutionsResponse) Reset()                    { *m = ValidateSolutionsResponse{} }
func (m *ValidateSolutionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateSolutionsResponse) ProtoMessage()               {}
func (*ValidateSolutionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ValidateSolutionsResponse) GetSecrets() [][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type PaymentOfferRequest struct {
	Cookie            []byte   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Amount            int64    `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	PublicKey         string   `protobuf:"bytes,3,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	EscrowHash        []byte   `protobuf:"bytes,4,opt,name=escrow_hash,json=escrowHash,proto3" json:"escrow_hash,omitempty"`
	EscrowScript      []byte   `protobuf:"bytes,5,opt,name=escrow_script,json=escrowScript,proto3" json:"escrow_script,omitempty"`
	EscrowTransaction []byte   `protobuf:"bytes,6,opt,name=escrow_transaction,json=escrowTransaction,proto3" json:"escrow_transaction,omitempty"`
	Puzzle            []byte   `protobuf:"bytes,7,opt,name=puzzle,proto3" json:"puzzle,omitempty"`
	RealPuzzleList    []byte   `protobuf:"bytes,8,opt,name=real_puzzle_list,json=realPuzzleList,proto3" json:"real_puzzle_list,omitempty"`
	RandomFactors     [][]byte `protobuf:"bytes,9,rep,name=random_factors,json=randomFactors,proto3" json:"random_factors,omitempty"`
}

func (m *PaymentOfferRequest) Reset()                    { *m = PaymentOfferRequest{} }
func (m *PaymentOfferRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentOfferRequest) ProtoMessage()               {}
func (*PaymentOfferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PaymentOfferRequest) GetCookie() []byte {
	if m != nil {
		return m.Cookie
	}
	return nil
}

func (m *PaymentOfferRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PaymentOfferRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *PaymentOfferRequest) GetEscrowHash() []byte {
	if m != nil {
		return m.EscrowHash
	}
	return nil
}

func (m *PaymentOfferRequest) GetEscrowScript() []byte {
	if m != nil {
		return m.EscrowScript
	}
	return nil
}

func (m *PaymentOfferRequest) GetEscrowTransaction() []byte {
	if m != nil {
		return m.EscrowTransaction
	}
	return nil
}

func (m *PaymentOfferRequest) GetPuzzle() []byte {
	if m != nil {
		return m.Puzzle
	}
	return nil
}

func (m *PaymentOfferRequest) GetRealPuzzleList() []byte {
	if m != nil {
		return m.RealPuzzleList
	}
	return nil
}

func (m *PaymentOfferRequest) GetRandomFactors() [][]byte {
	if m != nil {
		return m.RandomFactors
	}
	return nil
}

type PaymentOfferResponse struct {
}

func (m *PaymentOfferResponse) Reset()                    { *m = PaymentOfferResponse{} }
func (m *PaymentOfferResponse) String() string            { return proto.CompactTextString(m) }
func (*PaymentOfferResponse) ProtoMessage()               {}
func (*PaymentOfferResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func init() {
	proto.RegisterType((*VersionRequest)(nil), "tumblerrpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "tumblerrpc.VersionResponse")
	proto.RegisterType((*PingRequest)(nil), "tumblerrpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "tumblerrpc.PingResponse")
	proto.RegisterType((*SetupEscrowRequest)(nil), "tumblerrpc.SetupEscrowRequest")
	proto.RegisterType((*SetupEscrowResponse)(nil), "tumblerrpc.SetupEscrowResponse")
	proto.RegisterType((*GetPuzzlePromisesRequest)(nil), "tumblerrpc.GetPuzzlePromisesRequest")
	proto.RegisterType((*GetPuzzlePromisesResponse)(nil), "tumblerrpc.GetPuzzlePromisesResponse")
	proto.RegisterType((*FinalizeEscrowRequest)(nil), "tumblerrpc.FinalizeEscrowRequest")
	proto.RegisterType((*FinalizeEscrowResponse)(nil), "tumblerrpc.FinalizeEscrowResponse")
	proto.RegisterType((*GetSolutionPromisesRequest)(nil), "tumblerrpc.GetSolutionPromisesRequest")
	proto.RegisterType((*GetSolutionPromisesResponse)(nil), "tumblerrpc.GetSolutionPromisesResponse")
	proto.RegisterType((*ValidateSolutionsRequest)(nil), "tumblerrpc.ValidateSolutionsRequest")
	proto.RegisterType((*ValidateSolutionsResponse)(nil), "tumblerrpc.ValidateSolutionsResponse")
	proto.RegisterType((*PaymentOfferRequest)(nil), "tumblerrpc.PaymentOfferRequest")
	proto.RegisterType((*PaymentOfferResponse)(nil), "tumblerrpc.PaymentOfferResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionService service

type VersionServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tumblerrpc.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for TumblerService service

type TumblerServiceClient interface {
	// Queries
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Exchange between Tumbler and payees
	SetupEscrow(ctx context.Context, in *SetupEscrowRequest, opts ...grpc.CallOption) (*SetupEscrowResponse, error)
	GetPuzzlePromises(ctx context.Context, in *GetPuzzlePromisesRequest, opts ...grpc.CallOption) (*GetPuzzlePromisesResponse, error)
	FinalizeEscrow(ctx context.Context, in *FinalizeEscrowRequest, opts ...grpc.CallOption) (*FinalizeEscrowResponse, error)
	// Exchange between Tumbler and payers
	GetSolutionPromises(ctx context.Context, in *GetSolutionPromisesRequest, opts ...grpc.CallOption) (*GetSolutionPromisesResponse, error)
	ValidateSolutions(ctx context.Context, in *ValidateSolutionsRequest, opts ...grpc.CallOption) (*ValidateSolutionsResponse, error)
	PaymentOffer(ctx context.Context, in *PaymentOfferRequest, opts ...grpc.CallOption) (*PaymentOfferResponse, error)
}

type tumblerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTumblerServiceClient(cc *grpc.ClientConn) TumblerServiceClient {
	return &tumblerServiceClient{cc}
}

func (c *tumblerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) SetupEscrow(ctx context.Context, in *SetupEscrowRequest, opts ...grpc.CallOption) (*SetupEscrowResponse, error) {
	out := new(SetupEscrowResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/SetupEscrow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) GetPuzzlePromises(ctx context.Context, in *GetPuzzlePromisesRequest, opts ...grpc.CallOption) (*GetPuzzlePromisesResponse, error) {
	out := new(GetPuzzlePromisesResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/GetPuzzlePromises", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) FinalizeEscrow(ctx context.Context, in *FinalizeEscrowRequest, opts ...grpc.CallOption) (*FinalizeEscrowResponse, error) {
	out := new(FinalizeEscrowResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/FinalizeEscrow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) GetSolutionPromises(ctx context.Context, in *GetSolutionPromisesRequest, opts ...grpc.CallOption) (*GetSolutionPromisesResponse, error) {
	out := new(GetSolutionPromisesResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/GetSolutionPromises", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) ValidateSolutions(ctx context.Context, in *ValidateSolutionsRequest, opts ...grpc.CallOption) (*ValidateSolutionsResponse, error) {
	out := new(ValidateSolutionsResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/ValidateSolutions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tumblerServiceClient) PaymentOffer(ctx context.Context, in *PaymentOfferRequest, opts ...grpc.CallOption) (*PaymentOfferResponse, error) {
	out := new(PaymentOfferResponse)
	err := grpc.Invoke(ctx, "/tumblerrpc.TumblerService/PaymentOffer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TumblerService service

type TumblerServiceServer interface {
	// Queries
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Exchange between Tumbler and payees
	SetupEscrow(context.Context, *SetupEscrowRequest) (*SetupEscrowResponse, error)
	GetPuzzlePromises(context.Context, *GetPuzzlePromisesRequest) (*GetPuzzlePromisesResponse, error)
	FinalizeEscrow(context.Context, *FinalizeEscrowRequest) (*FinalizeEscrowResponse, error)
	// Exchange between Tumbler and payers
	GetSolutionPromises(context.Context, *GetSolutionPromisesRequest) (*GetSolutionPromisesResponse, error)
	ValidateSolutions(context.Context, *ValidateSolutionsRequest) (*ValidateSolutionsResponse, error)
	PaymentOffer(context.Context, *PaymentOfferRequest) (*PaymentOfferResponse, error)
}

func RegisterTumblerServiceServer(s *grpc.Server, srv TumblerServiceServer) {
	s.RegisterService(&_TumblerService_serviceDesc, srv)
}

func _TumblerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_SetupEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).SetupEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/SetupEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).SetupEscrow(ctx, req.(*SetupEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_GetPuzzlePromises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPuzzlePromisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).GetPuzzlePromises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/GetPuzzlePromises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).GetPuzzlePromises(ctx, req.(*GetPuzzlePromisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_FinalizeEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).FinalizeEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/FinalizeEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).FinalizeEscrow(ctx, req.(*FinalizeEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_GetSolutionPromises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSolutionPromisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).GetSolutionPromises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/GetSolutionPromises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).GetSolutionPromises(ctx, req.(*GetSolutionPromisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_ValidateSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).ValidateSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/ValidateSolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).ValidateSolutions(ctx, req.(*ValidateSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TumblerService_PaymentOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TumblerServiceServer).PaymentOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tumblerrpc.TumblerService/PaymentOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TumblerServiceServer).PaymentOffer(ctx, req.(*PaymentOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TumblerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tumblerrpc.TumblerService",
	HandlerType: (*TumblerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TumblerService_Ping_Handler,
		},
		{
			MethodName: "SetupEscrow",
			Handler:    _TumblerService_SetupEscrow_Handler,
		},
		{
			MethodName: "GetPuzzlePromises",
			Handler:    _TumblerService_GetPuzzlePromises_Handler,
		},
		{
			MethodName: "FinalizeEscrow",
			Handler:    _TumblerService_FinalizeEscrow_Handler,
		},
		{
			MethodName: "GetSolutionPromises",
			Handler:    _TumblerService_GetSolutionPromises_Handler,
		},
		{
			MethodName: "ValidateSolutions",
			Handler:    _TumblerService_ValidateSolutions_Handler,
		},
		{
			MethodName: "PaymentOffer",
			Handler:    _TumblerService_PaymentOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 952 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcb, 0x92, 0xdb, 0x44,
	0x14, 0x2d, 0xf9, 0x19, 0x5f, 0x3f, 0x48, 0x7a, 0xc2, 0xa0, 0x68, 0x20, 0x33, 0x08, 0x06, 0x66,
	0x93, 0x59, 0x40, 0xb1, 0x60, 0x4b, 0x15, 0x49, 0xaa, 0x78, 0x19, 0xd9, 0x15, 0x96, 0xa6, 0x47,
	0xbe, 0xce, 0x34, 0x96, 0xd5, 0x9a, 0xee, 0x76, 0x88, 0x67, 0xcb, 0x07, 0xf0, 0x1b, 0xf0, 0x19,
	0xf0, 0x3f, 0xac, 0xf8, 0x01, 0xaa, 0x1f, 0x1a, 0x4b, 0xb6, 0x34, 0x66, 0xe7, 0x7b, 0xee, 0x55,
	0xdf, 0xd3, 0xe7, 0x3e, 0xda, 0xd0, 0xa3, 0x19, 0xbb, 0xcc, 0x04, 0x57, 0x9c, 0x80, 0x5a, 0xaf,
	0xae, 0x12, 0x14, 0x22, 0x8b, 0xc3, 0x87, 0x30, 0x7a, 0x85, 0x42, 0x32, 0x9e, 0x46, 0x78, 0xb3,
	0x46, 0xa9, 0xc2, 0xbf, 0x3c, 0x78, 0xe7, 0x0e, 0x92, 0x19, 0x4f, 0x25, 0x92, 0x73, 0x18, 0xbd,
	0xb1, 0xd0, 0x4c, 0x2a, 0xc1, 0xd2, 0xd7, 0xbe, 0x77, 0xe6, 0x5d, 0xf4, 0xa2, 0xa1, 0x43, 0x27,
	0x06, 0x24, 0x8f, 0xa1, 0xbd, 0xa2, 0xbf, 0x70, 0xe1, 0x37, 0xce, 0xbc, 0x8b, 0x61, 0x64, 0x0d,
	0x83, 0xb2, 0x94, 0x0b, 0xbf, 0xe9, 0x50, 0x6d, 0x68, 0x34, 0xa3, 0x2a, 0xbe, 0xf6, 0x5b, 0x16,
	0x35, 0x06, 0x79, 0x0a, 0x90, 0x09, 0x14, 0x98, 0x20, 0x95, 0xe8, 0xb7, 0x4d, 0x92, 0x02, 0xa2,
	0x89, 0x5c, 0xad, 0x59, 0x32, 0x9f, 0xad, 0x50, 0xd1, 0x39, 0x55, 0xd4, 0xef, 0x58, 0x22, 0x06,
	0xfd, 0xce, 0x81, 0xe1, 0x10, 0xfa, 0x63, 0x96, 0xbe, 0xce, 0xaf, 0x34, 0x82, 0x81, 0x35, 0xed,
	0x75, 0x42, 0x04, 0x32, 0x41, 0xb5, 0xce, 0xbe, 0x96, 0xb1, 0xe0, 0xbf, 0xba, 0x28, 0xe2, 0x43,
	0x97, 0xce, 0xe7, 0x02, 0xa5, 0x74, 0xb7, 0xcb, 0x4d, 0xf2, 0x01, 0x40, 0xb6, 0xbe, 0x4a, 0x58,
	0x3c, 0x5b, 0xe2, 0xc6, 0x5c, 0xae, 0x17, 0xf5, 0x2c, 0xf2, 0x0d, 0x6e, 0xc8, 0x31, 0x74, 0xe8,
	0x8a, 0xaf, 0x53, 0x65, 0x6e, 0xd8, 0x8c, 0x9c, 0x15, 0xfe, 0xe3, 0xc1, 0x51, 0x29, 0x8f, 0x53,
	0xf3, 0x18, 0x3a, 0x31, 0xe7, 0x4b, 0x86, 0x26, 0xcf, 0x20, 0x72, 0x96, 0x96, 0x04, 0x33, 0x1e,
	0x5f, 0x9b, 0x0c, 0xed, 0xc8, 0x1a, 0xe4, 0x04, 0x7a, 0x09, 0x8f, 0x97, 0x33, 0xc5, 0x56, 0x68,
	0x12, 0xb4, 0xa3, 0x07, 0x1a, 0x98, 0xb2, 0x15, 0x16, 0x39, 0xb7, 0xee, 0xe3, 0xdc, 0xde, 0xe5,
	0xfc, 0x11, 0x0c, 0xd1, 0xb0, 0x9a, 0xc9, 0x58, 0xb0, 0x4c, 0x19, 0x1d, 0x07, 0xd1, 0xc0, 0x82,
	0x13, 0x83, 0x91, 0x67, 0x40, 0x5c, 0x90, 0x12, 0x34, 0x95, 0x34, 0x56, 0x8c, 0xa7, 0x7e, 0xd7,
	0x44, 0x3e, 0xb2, 0x9e, 0xe9, 0xd6, 0x11, 0xfe, 0xe9, 0x81, 0xff, 0x02, 0xd5, 0x78, 0x7d, 0x7b,
	0x9b, 0xe0, 0x58, 0xf0, 0x15, 0x93, 0x28, 0x73, 0x75, 0xeb, 0x2e, 0x1d, 0xc2, 0x70, 0x41, 0x97,
	0x38, 0x93, 0xa8, 0x66, 0xd7, 0x54, 0xda, 0xcb, 0x0f, 0xa2, 0xbe, 0x06, 0x27, 0xa8, 0x5e, 0x52,
	0x79, 0xad, 0x63, 0x04, 0xd2, 0x64, 0x1b, 0xd3, 0xb4, 0x31, 0x1a, 0xcc, 0x63, 0x9e, 0x01, 0x29,
	0x90, 0x34, 0x61, 0xa8, 0x45, 0x69, 0x6a, 0xae, 0x05, 0xcf, 0x4b, 0xe3, 0x08, 0x7f, 0xf7, 0xe0,
	0x49, 0x05, 0x57, 0x57, 0xa1, 0xb2, 0x78, 0x96, 0x70, 0x41, 0x3c, 0xe3, 0xd6, 0x1f, 0xde, 0xf5,
	0x83, 0x71, 0x6b, 0x44, 0xbb, 0x7d, 0xe8, 0x5a, 0x43, 0xfa, 0x4d, 0x93, 0x3f, 0x37, 0x49, 0x00,
	0x0f, 0x32, 0x97, 0xcb, 0x51, 0xbb, 0xb3, 0xc3, 0x3f, 0x3c, 0x78, 0xf7, 0x39, 0x4b, 0x69, 0xc2,
	0x6e, 0xb1, 0xdc, 0x98, 0x75, 0xd2, 0x11, 0x68, 0x49, 0x9a, 0x28, 0x47, 0xc0, 0xfc, 0x26, 0x67,
	0x30, 0x30, 0x72, 0xaa, 0xb7, 0xb3, 0x84, 0x49, 0xe5, 0x94, 0x02, 0x8d, 0x4d, 0xdf, 0x7e, 0xcb,
	0xa4, 0x89, 0x30, 0x62, 0xe6, 0x11, 0x2d, 0x1b, 0xa1, 0x31, 0x17, 0x71, 0x0a, 0x7d, 0x41, 0xd3,
	0x39, 0x5f, 0xcd, 0x32, 0x3a, 0x97, 0x7e, 0xdb, 0x10, 0x05, 0x0b, 0x8d, 0xe9, 0x5c, 0x86, 0x37,
	0x70, 0xbc, 0xcb, 0xd4, 0x09, 0x77, 0x0a, 0x7d, 0xd7, 0x31, 0xa6, 0x4e, 0x96, 0x2f, 0x58, 0xc8,
	0x94, 0xc9, 0x87, 0xae, 0xc4, 0x58, 0xa0, 0x92, 0x7e, 0xc3, 0x6a, 0xe3, 0x4c, 0xf2, 0x3e, 0xf4,
	0x6e, 0xd6, 0x5c, 0x31, 0x4c, 0x55, 0xae, 0xdb, 0x16, 0x08, 0x17, 0x10, 0xbc, 0x40, 0x35, 0xe1,
	0xc9, 0x5a, 0x17, 0x71, 0xb7, 0xb9, 0xea, 0x47, 0xb7, 0x7a, 0xa6, 0x6a, 0x2b, 0x14, 0x66, 0x70,
	0x52, 0x99, 0xe7, 0xc0, 0xe8, 0x16, 0x0b, 0xdb, 0x28, 0x17, 0x56, 0x77, 0xcb, 0x12, 0x37, 0x79,
	0x47, 0xba, 0x9b, 0x2d, 0x71, 0xe3, 0x3a, 0xf1, 0x37, 0x0f, 0xfc, 0x57, 0x34, 0x61, 0x73, 0xaa,
	0x30, 0xcf, 0x7b, 0x70, 0x6a, 0x2e, 0xe0, 0xa1, 0x29, 0xb3, 0x6b, 0x43, 0x53, 0x48, 0xdb, 0x06,
	0x23, 0x8d, 0xdb, 0xb6, 0x36, 0xc5, 0x3c, 0x87, 0x91, 0x2b, 0xe6, 0x82, 0xc6, 0x8a, 0x8b, 0x9c,
	0xc1, 0xd0, 0xa2, 0xcf, 0x2d, 0x18, 0x7e, 0x01, 0x4f, 0x2a, 0x48, 0xb8, 0x5b, 0x17, 0x8a, 0xe6,
	0x95, 0x8a, 0x16, 0xfe, 0xdd, 0x80, 0xa3, 0x31, 0xdd, 0xac, 0x30, 0x55, 0x3f, 0x2c, 0x16, 0x28,
	0x0e, 0xf1, 0xde, 0xae, 0xca, 0x46, 0x71, 0x55, 0xee, 0x0c, 0x5c, 0x73, 0x77, 0x5b, 0xed, 0xb4,
	0x55, 0x6b, 0xaf, 0xad, 0xf6, 0xd6, 0x59, 0xfb, 0x7f, 0xaf, 0xb3, 0x4e, 0xcd, 0x3a, 0xd3, 0x5c,
	0xad, 0xbc, 0x6e, 0xe3, 0x39, 0x4b, 0x6b, 0x6f, 0x06, 0xa8, 0xa8, 0xfd, 0x03, 0xab, 0xbd, 0xc6,
	0xef, 0xd5, 0xbe, 0x57, 0xa5, 0xfd, 0x31, 0x3c, 0x2e, 0x6b, 0x68, 0x65, 0xff, 0x6c, 0x7a, 0xf7,
	0x36, 0x4f, 0x50, 0xbc, 0x61, 0x31, 0x92, 0xaf, 0xa0, 0xeb, 0x10, 0x12, 0x5c, 0x6e, 0x5f, 0xf1,
	0xcb, 0xf2, 0x13, 0x1e, 0x9c, 0x54, 0xfa, 0xdc, 0xa9, 0xff, 0xb6, 0x60, 0x34, 0xb5, 0xee, 0xfc,
	0xd8, 0x2f, 0xa1, 0xa5, 0xdf, 0x47, 0xf2, 0x5e, 0xf1, 0xbb, 0xc2, 0x03, 0x1a, 0xf8, 0xfb, 0x0e,
	0xd7, 0x1a, 0xdf, 0x43, 0xbf, 0xf0, 0xc4, 0x91, 0xa7, 0xc5, 0xc0, 0xfd, 0x37, 0x36, 0x38, 0xad,
	0xf5, 0xbb, 0xf3, 0x7e, 0x86, 0x47, 0x7b, 0x6b, 0x99, 0x7c, 0x5c, 0xfc, 0xaa, 0xee, 0x85, 0x09,
	0xce, 0x0f, 0x44, 0xb9, 0x0c, 0x3f, 0xc1, 0xa8, 0xbc, 0xbc, 0xc8, 0x87, 0xc5, 0x0f, 0x2b, 0x57,
	0x70, 0x10, 0xde, 0x17, 0xe2, 0x0e, 0x5e, 0xc0, 0x51, 0xc5, 0xea, 0x20, 0x9f, 0xec, 0xd0, 0xaa,
	0xd9, 0x61, 0xc1, 0xa7, 0x07, 0xe3, 0xb6, 0x12, 0xed, 0x8d, 0x6a, 0x59, 0xa2, 0xba, 0x75, 0x52,
	0x96, 0xa8, 0x7e, 0xde, 0x7f, 0x84, 0x41, 0xb1, 0x21, 0x49, 0xa9, 0x6a, 0x15, 0xe3, 0x1e, 0x9c,
	0xd5, 0x07, 0xd8, 0x23, 0xaf, 0x3a, 0xe6, 0xaf, 0xe7, 0xe7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x9e, 0xe9, 0xe5, 0x87, 0x0a, 0x00, 0x00,
}
